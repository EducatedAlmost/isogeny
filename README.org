* Ã¦/Isogeny

Read the blog post: https://blog.almost.education/posts/isogeny

Built around Yogthos's [[https://github.com/yogthos/Selmer][Selmer]], Isogeny is named for the [[https://en.wikipedia.org/wiki/Selmer_group][Selmer group]], '/constructed from an [[https://en.wikipedia.org/wiki/Isogeny][isogeny]] of [[https://en.wikipedia.org/wiki/Abelian_variety][abelian varieties]]/'.

It is easy to do machine-specific configuration for programs like Emacs whose configuration files are written in Turing-complete languages. The same cannot be said for the multitude of programs whose configuration is written in simple data formats: /[[https://en.wikipedia.org/wiki/TOML][toml]]/, /json/, /yaml/, and many others.

/Isogeny/ allows you to make all configuration dynamic.

** Usage
*** Prerequisites
Isogeny is a Clojure script that requires [[https://github.com/babashka/babashka#installation][babashka]]^{[[https://aur.archlinux.org/packages/babashka-bin/][AUR]]} to run

*** Basic usage
Clone the repository:
#+begin_src sh
git clone https://github.com/EducatedAlmost/isogeny.git
cd isogeny
chmod +x isogeny.clj # check the source
#+end_src

Isogeny takes a /template/ of the configuration, a /context/ containing the values to be used, and produces an /output/ that is then used as a configuration file on the machine.
#+begin_src sh
./isogeny.clj -t TEMPLATE -c CONTEXT -o OUTPUT
#+end_src

Isogeny uses the [[https://github.com/yogthos/Selmer][Selmer]] templating system. To use it, replace anything you wish to be dynamic with ~{{ variable }}~. The context is an [[https://github.com/edn-format/edn][EDN]] file that contains the values for a particular machine, like ~{:variable "value"}~, and generally there will be one per config file per machine.

For more information about creating templates, see the comprehensive [[https://github.com/yogthos/Selmer][Selmer documentation]].

Template:
#+begin_src
...
Font size: {{ font.size }}
Font family: {{ font.family }}
Ports: {% for port in ports %}
  Port: {{ port }} {% endfor %}
...
#+end_src

Context:
#+begin_src clojure
{:font {:size 12
        :family "Fira mono"}
 :ports [3334 3335]}
#+end_src

Output:
#+begin_src
...
Font size: 12
Font family: Fira mono
Ports:
  Port: 3334
  Port: 3335
...
#+end_src

For another machine, the context will be different. The correct context can be dynamically loaded from a shell like so:
#+begin_src
config.$(uname).$(uname -n).edn
# => config.Linux.hermes.edn
# => config.Darwin.simon.edn
#+end_src

Isogeny is designed to be alled on startup when the login shell sources =~/.bash_profile=, =~/.profile=, or =~/.zprofile=, but can also be called from any shell.
#+begin_src sh
./isogeny.clj -t ~/.config/example/config.template \
    -c ~/.config/example/config.$(uname -n).edn \
    -t ~/.config/example/config.template \
    -t ~/.config/example/config.template \
#+end_src

Example files can be found in the file:examples/ directory.
#+begin_src sh
./isogeny.clj -t ./examples/foo.template \
    -c ./examples/foo.specific.edn \
    -o ./examples/foo.out \
#+end_src

**** Getting started
Isogeny can help you get started. Provide an existing config file with ~--prepare <file>~ and Isogeny will generate a template and context to use /without deleting the original/.
#+begin_src sh
./isogeny.clj --prepare config --verbose
# => config.template, config.$(uname -n).edn
#+end_src

*** Defaults
If the /template/ or /context/ are omitted, they are read from ~STDIN~, if /output/ is omitted it is printed to ~STDOUT~.

*** Further usage
**** Environment variables
Isogeny provides two means of rendering the values of environment variables in templates, a custom ~env~ tag used in the template like ~{% env "PATH" %}~, or in the config ~{:path (System/getenv "PATH")}~.

**** Nested values
Values that are nested within the context can easily be used in the template using the common ~foo.bar~ syntax.
#+begin_src
{{ foo.bar }}
{:foo {:bar "qux"}}
=> "qux"
#+end_src

**** Default contexts
It is always a good idea to have a /default context that can be fallen back on in the case that the specific context cannot be found.
#+begin_src sh
./isogeny.clj -t ./examples/foo.template \
    -c ./examples/foo.$(uname -n).edn \ # this file doesn\'t exist
    -d ./examples/foo.default.edn \ # so this context is used instead
    -o ./examples/foo.out \
#+end_src

**** Multi-template mode
Isogeny can render multiple templates at once using /multi-template/ mode. It doesn't require the output to be specified, because it just removes the final file extension. The context file must contain the context needed for every template.
#+begin_src sh
./isogeny.clj --multi-template \
    -c ./examples/foo.specific.edn \
    -o ./examples/foo.out \
    ./examples/foo.template ./examples/bar.template
#+end_src

**** Context overrides
Values in the context file can be overridden on the command line.
#+begin_src sh
./isogeny.clj -t ./examples/foo.template \
    -c ./examples.foo.specific.edn \
    -C '{:override? true}' \
    -o ./examples/foo.out
#+end_src

***** Deep merge
By default, the context override uses a shallow merge.
#+begin_src clojure
(merge {:foo {:bar "bar"}}
       {:foo {:qux "qux"}})
; => {:foo {:qux "qux"}}
#+end_src

By passing ~--deep-merge~, the maps are recursively merged instead.
#+begin_src clojure
(ae.isogeny/deep-merge
 {:foo {:bar "bar"}}
 {:foo {:qux "qux"}})
; => {:foo {:bar "bar" :qux "qux"}}
#+end_src

#+begin_src sh
./isogeny.clj -t ./examples/foo.template \
    -c ./examples.foo.specific.edn \
    -C '{:override? true}' \
    --deep-merge \
    -o ./examples/foo.out
#+end_src

**** Additional Selmer tags
As well as variables, Selmer contains a number of tags, such as ~includes~, ~extends~, ~for~, and ~if~. Isogeny provides ~env~, and allows one to define additional tags by providing a file of tag definitions; see file:examples/custom-tag.clj and [[https://github.com/yogthos/Selmer#tags][Selmer#Tags]] for examples.
#+begin_src sh
./isogeny.clj -t ./examples/foo.template \
    -c ./examples.foo.specific.edn \
    -a ./examples/custom-tag.clj \
    -o ./examples/foo.out
#+end_src

**** Safe
By passing the ~--safe~, there's a 99% chance that Isogeny won't overwrite any extant files. It is not a default because in the expected use case Isogeny will be overwriting extant configuration files.

**** Strict
By default, Isogeny will ignore when the template contains variables that are not defined in the context. To make it throw exceptions, it is recommended to use ~--strict~.

** How I use it
All of [[https://github.com/EducatedAlmost/.dotfiles.git][my config files]] are kept in source control. I use [[https://www.gnu.org/software/stow/][GNU Stow]] to reliably deploy them. The files that Isogeny uses are kept inside =~/.dotfiles= and Isogeny is run on every startup in =~/.bash_profile=:

#+begin_src sh
~/src/isogeny/isogeny.clj \
    -t $DOT/sway/.config/sway/config.template \
    -c $DOT/sway/.config/sway/config.$(uname -n).edn \
    -d $DOT/sway/.config/sway/config.default.edn \
    -o $DOT/sway/.config/sway/config \
    --strict --verbose

~/src/isogeny/isogeny.clj \
    -t $DOT/alacritty/.config/alacritty/alacritty.yml.template \
    -c $DOT/alacritty/.config/alacritty/alacritty.yml.$(uname -n).edn \
    -d $DOT/alacritty/.config/alacritty/alacritty.yml.default.edn \
    -o $DOT/alacritty/.config/alacritty/alacritty.yml \
    --strict --verbose
#+end_src

** Writing templates
Variables: ~{{ variable }}~

Tags: ~{% tag %}~

Example tags: ~include~ , ~block~, ~cycle~, ~debug~, ~extends~, ~if~ / ~else~ / ~endif~, ~ifequal~, ~ifunequal~, ~for~ / ~endfor~, ~sum~, ~now~, ~comment~, ~firstof~, ~safe~, ~script~, ~style~, ~verbatim~, ~with~
